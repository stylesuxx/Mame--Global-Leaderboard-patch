diff --git a/makefile b/makefile
index a9180fd..ccb24b9 100644
--- a/makefile
+++ b/makefile
@@ -615,6 +615,10 @@ DRIVLISTOBJ = $(OBJ)/$(TARGET)/$(SUBTARGET)/drivlist.o
 # start with an empty set of libs
 LIBS = 
 
+# Global Leaderboard Diff
+# add curl
+LIBS += -lcurl
+
 # add expat XML library
 ifeq ($(BUILD_EXPAT),1)
 INCPATH += -I$(SRC)/lib/expat
diff --git a/src/emu/emuopts.c b/src/emu/emuopts.c
index 30c04fe..94e4e7c 100644
--- a/src/emu/emuopts.c
+++ b/src/emu/emuopts.c
@@ -203,6 +203,12 @@ const options_entry emu_options::s_option_entries[] =
   { OPTION_DISABLE_HISCORE_PATCH,                      "0",         OPTION_BOOLEAN,    "disable hiscore saving" },
   { OPTION_DISABLE_NAGSCREEN_PATCH,                    "1",         OPTION_BOOLEAN,    "disable suppression of nagscreens" },
   { OPTION_DISABLE_LOADING_PATCH,                      "1",         OPTION_BOOLEAN,    "disable suppression of loading screens /white box" },
+
+	// Global Leaderbaord Diff options
+	{ NULL,                                              NULL,        OPTION_HEADER,     "GLOBAL LEADERBOARD OPTIONS" },
+	{ OPTION_DISABLE_GLOBAL_LEADERBOARD_PATCH,           "0",         OPTION_BOOLEAN,    "disable global leaderbard" },
+	{ OPTION_GLOBAL_LEADERBOARD_API_KEY,                 "default",   OPTION_STRING,     "the global leaderboard API key" },
+	{ OPTION_GLOBAL_LEADERBOARD_URL,                     "http://leaderboard.1337.af/api", OPTION_STRING,     "the global leaderboard URL" },
     
   // Switchres options
 	{ NULL,                                              NULL,        OPTION_HEADER,     "CORE SWITCHRES OPTIONS" },
diff --git a/src/emu/emuopts.h b/src/emu/emuopts.h
index 535eed2..ecfedb3 100644
--- a/src/emu/emuopts.h
+++ b/src/emu/emuopts.h
@@ -206,6 +206,11 @@ enum
 #define OPTION_DISABLE_NAGSCREEN_PATCH		"disable_nagscreen_patch"
 #define OPTION_DISABLE_LOADING_PATCH		"disable_loading_patch"
 
+// Global Leaderboard Diff Options
+#define OPTION_DISABLE_GLOBAL_LEADERBOARD_PATCH       "disable_global_leaderboard_patch"
+#define OPTION_GLOBAL_LEADERBOARD_API_KEY             "global_leaderboard_api_key"
+#define OPTION_GLOBAL_LEADERBOARD_URL                 "global_leaderboard_url"
+
 /* Switchres Options */
 #define OPTION_MODELINE                        "modeline"
 #define OPTION_MONITOR                         "monitor"
@@ -389,6 +394,11 @@ public:
 	bool disable_nagscreen_patch() const { return bool_value(OPTION_DISABLE_NAGSCREEN_PATCH); }
 	bool disable_loading_patch() const { return bool_value(OPTION_DISABLE_LOADING_PATCH); }
 
+	// Global Leaderboard Diff Options
+	bool disable_global_leaderboard_patch() const { return bool_value(OPTION_DISABLE_GLOBAL_LEADERBOARD_PATCH); }
+	const char *global_leaderboard_api_key() const { return value(OPTION_GLOBAL_LEADERBOARD_API_KEY); }
+	const char *global_leaderboard_url() const { return value(OPTION_GLOBAL_LEADERBOARD_URL); }
+
 	bool confirm_quit() const { return bool_value(OPTION_CONFIRM_QUIT); }
 	
 	// Switchres options
diff --git a/src/emu/hiscore.c b/src/emu/hiscore.c
index fe27953..c002b6e 100644
--- a/src/emu/hiscore.c
+++ b/src/emu/hiscore.c
@@ -12,6 +12,7 @@
 #include "emu.h"
 #include "emuopts.h"
 #include "hiscore.h"
+#include "curl/curl.h"
 
 #define MAX_CONFIG_LINE_SIZE 48
 
@@ -283,6 +284,93 @@ static void hiscore_load (running_machine &machine)
 	}
 }
 
+// Global Leaderbaord Diff
+static void hiscore_submit (running_machine &machine)
+{
+	CURL *curl;
+	CURLcode res;
+
+	char* tmp;
+	const char* api = "key=";
+	const char* name = "&game=";
+	const char* score = "&data=";
+
+	char* params = global_alloc_array(char,
+		strlen(api) +
+		strlen(machine.options().global_leaderboard_api_key()) +
+		strlen(name) +
+		strlen(machine.basename()) +
+		strlen(score) +
+		1);
+
+	strcpy(params, api);
+	strcat(params, machine.options().global_leaderboard_api_key());
+	strcat(params, name);
+	strcat(params, machine.basename());
+	strcat(params, score);
+
+	file_error filerr;
+	emu_file f(machine.options().hiscore_directory(), OPEN_FLAG_READ);
+	filerr = f.open(machine.basename(), ".hi");
+
+	if (filerr == FILERR_NONE)
+	{
+		memory_range *mem_range = state.mem_range;
+
+		while (mem_range)
+		{
+			UINT8 *data = global_alloc_array(UINT8, mem_range->num_bytes);
+			char *data_hex = global_alloc_array(char, mem_range->num_bytes*2 + 1);
+			memset(data_hex, '\0', 1);
+
+			if (data)
+			{
+				f.read(data, mem_range->num_bytes);
+
+				int i;
+				for (i = 0; i < mem_range->num_bytes; i++)
+				{
+					char* hex = global_alloc_array(char, 3);
+					sprintf(hex, "%02X", data[i]);
+					strcat(data_hex, hex);
+					global_free(hex);
+				}
+
+				global_free (data);
+			}
+
+			size_t len = strlen(params) + strlen(data_hex) + 1;
+			tmp = global_alloc_array(char, len);
+			strcpy(tmp, params);
+			strcat(tmp, data_hex);
+			global_free(params);
+			params = global_alloc_array(char, strlen(tmp) + 1);
+			strcpy(params, tmp);
+
+			global_free(tmp);
+			global_free(data_hex);
+			mem_range = mem_range->next;
+		}
+		f.close();
+
+		curl_global_init(CURL_GLOBAL_ALL);
+		curl = curl_easy_init();
+		if (curl)
+		{
+			curl_easy_setopt(curl, CURLOPT_URL, machine.options().global_leaderboard_url());
+			curl_easy_setopt(curl, CURLOPT_POSTFIELDS, params);
+			printf("NEW - All params: %s\n", params);
+			res = curl_easy_perform(curl);
+			if (res != CURLE_OK)
+				fprintf(stderr, "Transmitting score to global leaderboard failed: %s\n", curl_easy_strerror(res));
+
+			curl_easy_cleanup(curl);
+		}
+		curl_global_cleanup();
+	}
+	global_free(params);
+}
+
 static void hiscore_save (running_machine &machine)
 {
   file_error filerr;
@@ -338,6 +426,11 @@ static TIMER_CALLBACK( hiscore_periodic )
 void hiscore_close (running_machine &machine)
 {
 	if (state.hiscores_have_been_loaded) hiscore_save(machine);
+
+	// Global Leaderbaord Diff options
+	if (! machine.options().disable_global_leaderboard_patch())
+		hiscore_submit(machine);
+
 	hiscore_free();
 }
 
